is.numeric(data)
y = as.numeric(y)
is.numeric(y)
data = apply(data,1,as.numeric)
data = apply(data,2,as.numeric)
?mapply
data = mapply(data,1,as.numeric)
data = mapply(data,2,as.numeric)
is.numeric(data)
for (i in 1:nrow(data)){
data[i,]=apply(data[i,],1, as.numeric)
}
for (i in 1:nrow(data)){
for (j in 1:length(data[i,])){
data[i,j]=as.numeric(data[i,j])
}
}
data
data =  read.csv("monkey_optical_nerve_landmarks.txt", sep="\t", header=T)
data=data[,-1]
data[16,13:15] = data[15,13:15] #replace the NA
data
length(data[1,])
as.numeric(data[1,2])
data
data[1,]
typeof(data)
data = as.matrix(data)
data
for (i in 1:nrow(data)){
for (j in 1:length(data[i,])){
data[i,j]=as.numeric(data[i,j])
}
}
data
is.numeric(data)
data =  read.table("monkey_optical_nerve_landmarks.txt", sep="\t", header=T)
data =  read.table("monkey_optical_nerve_landmarks.txt", sep="\t", header=T)
data=data[,-1]
data[16,13:15] = data[15,13:15] #replace the NA
data = as.matrix(data)
data
for (i in 1:nrow(data)){
for (j in 1:length(data[i,])){
data[i,j]=as.numeric(data[i,j])
}
}
data
data = read.csv('./data_clean/monkey_part1.txt', sep=" ", header=T)
data_suite = read.csv('./data_clean/monkey_part2.txt', sep=" ", header=T,  fileEncoding = "UCS-2LE")
names(data_suite)
data_total = cbind(data, data_suite)
names(data_total)=c("Filename","Sx","Sy","Sz","Tx","Ty", "Tz","Nx","Ny","Nz","Ix","Iy","Iz","Vx","Vy","Vz")
write.table(data_total, "monkey_optical_nerve_landmarks.txt", sep=" ")
data =  read.table("monkey_optical_nerve_landmarks.txt", sep=" ", header=T)
data
names(data_total)=c("Filename","Sx","Sy","Sz","Tx","Ty", "Tz","Nx","Ny","Nz","Ix","Iy","Iz","Vx","Vy","Vz")
data
names(data_total)=c("Sx","Sy","Sz","Tx","Ty", "Tz","Nx","Ny","Nz","Ix","Iy","Iz","Vx","Vy","Vz")
data = read.csv('./data_clean/monkey_part1.txt', sep=" ", header=T)
data_suite = read.csv('./data_clean/monkey_part2.txt', sep=" ", header=T,  fileEncoding = "UCS-2LE")
names(data_suite)
data_total = cbind(data, data_suite)
names(data_total)=c("Filename","Sx","Sy","Sz","Tx","Ty", "Tz","Nx","Ny","Nz","Ix","Iy","Iz","Vx","Vy","Vz")
data_total
data =  read.table("monkey_optical_nerve_landmarks.txt", sep=" ", header=T)
data
data =  read.table("monkey_optical_nerve_landmarks.txt", sep="\t", header=T)
data
data=data[,-1] #Remove filenames from the data.frame
data[16,13:15] = data[15,13:15] #replace the NA
data
topyof(data)
typeof(data)
data = as.matrix(data)
typeof(data)
for (i in 1:nrow(data)){
for (j in 1:length(data[i,])){
data[i,j]=as.numeric(data[i,j])
}
}
data
is.numeric(data[1,1])
data =  read.table("monkey_optical_nerve_landmarks.txt", sep="\t", header=T)
data=data[,-1] #Remove filenames from the data.frame
data[16,13:15] = data[15,13:15] #replace the NA
data = as.matrix(data)
typeof(data[1,1])
data =  read.table("monkey_optical_nerve_landmarks.txt", sep="\t", header=T)
data=data[,-1] #Remove filenames from the data.frame
data[16,13:15] = data[15,13:15] #replace the NA
data = data.matrix(data)
typeof(data)
is.numeric(data)
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksToDataframe.R')
source("source_all.R")
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksToDataframe.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
library(rpart)
source("source_all.R")
is.numeric(data)
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
source("source_all.R")
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
source("source_all.R")
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
u =c(1,2,3)
is.vector(u)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
source("source_all.R")
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
source("source_all.R")
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
LandmarksToDataframe(data[1,])
data[1,]
landmarks = data[1,]
landmarks
K = length(landmarks)/3
xBOOL = rep(c(TRUE,FALSE,FALSE),K)
yBOOL = rep(c(FALSE,TRUE,FALSE),K)
zBOOL = rep(c(FALSE,FALSE,TRUE),K)
xBOOL
x = as.vector(landmarks[xBOOL])
y = as.vector(landmarks[yBOOL])
z = as.vector(landmarks[zBOOL])
x
DF  <- cbind(x,y,z)
DF
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/Landmarks2Matrix.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
source("source_all.R")
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
data = data.matrix(data)
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
DF <- Landmarks2Matrix(landmarks)
DF
x = DF[,1]
x
is.vector(x)
is.numeric(x)
u = c(1,2,3)
v=c(2,3,4)
w=c(1,2,3)
plot.new()
points3D(u,v,w)
y = DF[,2]
is.numeric(y)
is.vector(y)
z = DF[,3]
is.numeric(z)
is.vector(z)
points3D(x,y,z) #,add=TRUE,type = "p") #col=(DF$col),
points3D(x,y,z,type = "p") #col=(DF$col),
points3D(x,y,z,type = "b") #col=(DF$col),
points3D(x,y,z, add=T, type = "b") #col=(DF$col),
}
points3D(x,y,z, add=T, type = "b") #col=(DF$col),
points3D(x,y,z, add=T, type = "b") #col=(DF$col),
plot.new()
points3D(x,y,z, add=T, type = "b") #col=(DF$col),
plot.new()
points3D(x,y,z, type = "b") #col=(DF$col),
points3D(u,v,w, add=T)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
for (i in 1:3){
LandmarksPlot(data[i,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
LandmarksPlot(data[1,])
for (i in 2:3){
LandmarksPlot(data[i,], add=TRUE)
}
c("red","blue","green")[which(data)]
points3D(x,y,z, add=add,type = "p", pch=19, cex=1,col=rainbow) #col=(DF$col),
points3D(x,y,z, add=FALSE,type = "p", pch=19, cex=1,col=rainbow) #col=(DF$col),
add=FALSE
points3D(x,y,z, add=add,type = "p", pch=19, cex=1,col=col) #col=(DF$col),
color = rainbow(K)
points3D(x,y,z, add=add,type = "p", pch=19, cex=1,col=color) #col=(DF$col),
points3D(x,y,z, add=add,type = "p", pch=19, cex=1,colvar=color) #col=(DF$col),
plot.new()
LandmarksPlot(data[1,])
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
plot.new()
LandmarksPlot(data[1,])
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksPlot.R')
source("source_all.R")
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/main.R')
n = nrow(data)
K = ncol(data)/3
#Pelvis.mean = apply(data,2,mean)
plot.new()
LandmarksPlot(data[1,])
for (i in 2:n){
LandmarksPlot(data[i,], add=TRUE)
}
RigidRegistered.data = RigidRegistration(data)
warnings()
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/RigidRegistration.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/RigidRegistration.R')
source("source_all.R")
RigidRegistered.data = RigidRegistration(data)
warningds()
warnings()
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksTranslation.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksTranslation.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksTranslation.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksTranslation.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/Barycenter.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/Barycenter.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksTranslation.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/Barycenter.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/LandmarksTranslation.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
RigidRegistered.data = RigidRegistration(data)
plot.new()
for (i in 1:3){
LandmarksPlot(RigidRegistered.data[i,])
}
plot.new()
LandmarksPlot(RigidRegistered.data[1,])
for (i in 2:n){
LandmarksPlot(RigidRegistered.data[i,])
}
plot.new()
LandmarksPlot(RigidRegistered.data[1,])
for (i in 2:n){
LandmarksPlot(RigidRegistered.data[i,],add=T)
}
data=read.csv("E4SA_AllSort.txt",sep=",", header=TRUE)
rownames(data)=data[,1]
data= data[,-1]
data = data[,1:48]
data
n = nrow(data)
K = ncol(data)/3
plot.new()
LandmarksPlot(data[1,])
for (i in 2:n){
LandmarksPlot(data[i,], add=TRUE)
}
RigidRegistered.data = RigidRegistration(data)
RigidRegistered.data = RigidRegistration(data)
data = data.matrix(data)
RigidRegistered.data = RigidRegistration(data)
plot.new()
LandmarksPlot(data[1,])
for (i in 2:n){
LandmarksPlot(data[i,], add=TRUE)
}
RigidRegistered.data = RigidRegistration(data)
plot.new()
LandmarksPlot(RigidRegistered.data[1,])
for (i in 2:n){
LandmarksPlot(RigidRegistered.data[i,],add=T)
}
maxmin = matrix(c(0,0,0,0,0,0), nrow=2)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/dataPlot.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
dataPlot(RigidRegistered.data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/dataPlot.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/dataPlot.R')
dataPlot(RigidRegistered.data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/main.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/main.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/main.R')
H = matrix(c(0,0,0,0), nrow=2)
H
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
data
l1 = data[1,]
l2 = data[2,]
computeH(l1,l2)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
computeH(l1,l2)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
computeH(l1,l2)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
computeH(l1,l2)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
computeH(l1,l2)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
computeH(l1,l2)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/source_all.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/RigidRegistration.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/RigidRegistration.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/RigidRegistration.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/RigidRegistration.R')
source("source_all.R")
RigidRegistered.data = RigidRegistration(data)
computeH(l1,l2)
l1
l2
landmarks1 = l1
landmarks2 = l2
H = matrix(c(0,0,0,0), nrow=2)
H = matrix(c(0,0,0,0,0,0), nrow=3)
X1 = Landmarks2Matrix(landmarks1)
X2 = Landmarks2Matrix(landmarks2)
K = nrow(X1)
for (k in 1:K){
H = H + X1[k,]%*%t(X2[k,])
}
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
computeH(l1,l2)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/utils_landmarks/computeH.R')
computeH(l1,l2)
source("source_all.R")
RigidRegistered.data = RigidRegistration(data)
H = computeH(l1,l2)
H
res = svd(H)
res
det(res$u)
det(res$v)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/RigidRegistration.R')
RigidRegistered.data = RigidRegistration(data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/RigidRegistration.R')
dataPlot(RigidRegistered.data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/main.R')
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/main.R')
dataPlot(data)
dataPlot(RigidRegistered.data)
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data 3D/main.R')
setwd("/home/nmiolane/Scripts/R/QuotientEstimations: Real Data circular")
data=read.csv("./data/wind_directions.txt",sep=",", header=TRUE)
data=read.csv("./data/wind_directions.txt",sep=",", header=TRUE)
data=read.csv("./data/wind_directions.txt",sep=" ", header=TRUE)
data=read.csv("./data/wind_directions.txt",sep=" ", header=TRUE,  fileEncoding = "UCS-2LE")
fix(data)
data=read.csv("./data/wind_directions.txt",sep=" ", header=TRUE,  fileEncoding = "UCS-2LE")
data=read.csv("./data/wind_directions.txt",sep=" ", header=TRUE,  fileEncoding = "UCS-2LE")
fix(data)
data = data[,1:2]
data = data[,1:2]
data = data.matrix(data)  #convert elements of data into numeric
n = nrow(data)
for (i in 1:n){
for (j in 1:n){
data[i,j]=data[i,j]*pi/180
}
}
n = nrow(data)
for (i in 1:n){
for (j in 1:2){
data[i,j]=data[i,j]*pi/180
}
}
fix(data)
data= data[,-1]
data= data[,-1]
ncol(data)
data=read.csv("./data/wind_directions.txt",sep=" ", header=TRUE,  fileEncoding = "UCS-2LE")
data = data[,1:2]
data = data.matrix(data)
ncol(data)
n = nrow(data)
for (i in 1:n){
for (j in 1:2){
data[i,j]=data[i,j]*pi/180
}
}
plot_sphere()
plot_points(data[,1],data[,2])
library(MASS)
library(ggplot2)
library(graphics)
library(plot3D)
source('Visualization/plot_sphere.R')
source('Visualization/plot_points.R')
plot_sphere()
plot_points(data[,1],data[,2])
source('~/.active-rstudio-document')
plot_sphere()
plot_points(data[,1],data[,2])
fix(data)
data=read.csv("./data/orbitalNormals_planets.txt",sep=" ", header=TRUE,  fileEncoding = "UCS-2LE")
fix(data)
fix(data)
data = data[,-1]
data = data.matrix(data)
install.packages('pracma')
library(pracma)
data = cart2sphr(data)
data = cart2sph(data)
fix(data)
data = data[,1:2]
plot_sphere()
plot_points(data[,1],data[,2])
fix(data)
data[,1]=data[,1]+pi/2
fix(data)
plot_sphere()
plot_points(data[,1],data[,2])
source('/home/nmiolane/Scripts/R/QuotientEstimations: Real Data circular/Visualization/plot_sphere.R')
plot_sphere()
plot_points(data[,1],data[,2])
plot_sphere(20,50)
plot_points(data[,1],data[,2])
par(mfrow=c(1,2))
plot_sphere(20,50)
plot_points(data[,1],data[,2])
plot_sphere(0,50)
plot_points(data[,1],data[,2])
plot_sphere(30,50)
plot_points(data[,1],data[,2])
